import pprint
import hashlib

from django.conf import settings
from django.contrib import messages
from django.shortcuts import redirect, render
from django.utils.translation import ugettext as _


from oscar.apps.checkout.views import ShippingMethodView as OscarShippingMethodView, \
                                        PaymentDetailsView as OscarPaymentDetailsView
from oscar.apps.payment.exceptions import  PaymentError
from oscar.apps.payment import models

pp = pprint.PrettyPrinter(indent=4)


class ShippingMethodView(OscarShippingMethodView):

    def get_success_response(self):
        '''
        Overriding the default behaviour in order
        to skip the `select payment-method` view
        and go directly to the pre
        '''
        return redirect('checkout:preview')


class PaymentDetailsView(OscarPaymentDetailsView):

    def get_context_data(self, **kwargs):
        context = super(PaymentDetailsView, self).get_context_data(**kwargs)
        context['submit'] = self.collect_submit_data()
        pp.pprint(context)
        return context

    @staticmethod
    def collect_submit_data():
        submit = {
            'url' : settings.CHECKOUT_SUBMIT_URL,
            'account_number' : settings.CHECKOUT_ACCOUNT_NUMBER,
        }
        return submit


class ReturnCheckoutView(PaymentDetailsView):

    def get(self, request, *args, **kwargs):
        if request.GET.get('action') == 'place_order':
            data = dict()
            data['order_number'] = request.GET.get('order_number')
            data['total'] = request.GET.get('total')
            data['key'] = request.GET.get('key')
            return self.handle_place_order_submission(resp=data)
            try:
                pass
            except PaymentError:
                messages.error(self.request, _('''Something went wrong during your card processing. 
                                                Please Try again, if the problem persist please,
                                                 contact our server administrator.'''))
        return redirect('checkout:preview')

    def handle_place_order_submission(self, resp):

        """
        Handle a request to place an order.
        This method is normally called after the customer has clicked "place
        order" on the preview page. It's responsible for (re-)validating any
        form information then building the submission dict to pass to the
        `submit` method.
        If forms are submitted on your payment details view, you should
        override this method to ensure they are valid before extracting their
        data into the submission dict and passing it onto `submit`.
        """
        if self.is_valid_payment_response(order_number=resp['order_number'], total=resp['total'],
                                             key=resp['key']):
            return self.submit(**self.build_submission())
        raise PaymentError("The response isn't valid from the gateway")


    @staticmethod
    def is_valid_payment_response(order_number, total, key):
        new_key = hashlib.md5()
        new_key.update(settings.CHECKOUT_SECRET_KEY.encode('utf8'))
        new_key.update(settings.CHECKOUT_ACCOUNT_NUMBER.encode('utf8'))
        new_key.update(order_number.encode('utf8'))
        new_key.update(total.encode('utf8'))
        check_hash = new_key.hexdigest()
        check_hash = check_hash.upper()
        return key == check_hash

    def handle_payment(self, order_number, order_total, **payment_kwargs):
        '''
        At this point the payment should be successfull
        and we just handle the payment on the
        oscar level.
        :param order_number: This is the Order number from, generated by oscar
        :param order_total: total amount paid by the user
        '''
        source_type, is_created = models.SourceType.objects.get_or_create(
            name='2Checkout')
        source = source_type.sources.model(
            source_type=source_type,
            amount_allocated=order_total.incl_tax, currency=order_total.currency)
        self.add_payment_source(source)
        self.add_payment_event('Authorised', order_total.incl_tax)
